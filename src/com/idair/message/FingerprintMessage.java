// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: C:\Users\Ali\workspaceAndroid\Wire workspace\WireTest\fingerprint.proto
package com.idair.message;

import com.squareup.wire.ByteString;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class FingerprintMessage extends Message {

  public static final Integer DEFAULT_ROWS = 0;
  public static final Integer DEFAULT_COLUMNS = 0;
  public static final Integer DEFAULT_BYTELENGTH = 0;
  public static final ByteString DEFAULT_PIXELDATA = ByteString.EMPTY;
  public static final ByteString DEFAULT_OUTPUTPIXELDATA = ByteString.EMPTY;
  public static final Boolean DEFAULT_PROCESSBINARIZATION = false;

  /**
   * Rows in Bitmap
   */
  @ProtoField(tag = 1, type = INT32, label = REQUIRED)
  public final Integer rows;

  /**
   * Columns in Bitmap
   */
  @ProtoField(tag = 2, type = INT32, label = REQUIRED)
  public final Integer columns;

  /**
   * Number of bytes in bitmap byte array
   */
  @ProtoField(tag = 3, type = INT32, label = REQUIRED)
  public final Integer bytelength;

  /**
   * Byte array of Bitmap pixel data(input)
   */
  @ProtoField(tag = 4, type = BYTES, label = REQUIRED)
  public final ByteString pixelData;

  /**
   * Byte array of output pixel data
   */
  @ProtoField(tag = 5, type = BYTES, label = REQUIRED)
  public final ByteString outputPixelData;

  /**
   * Binarization  boolean
   */
  @ProtoField(tag = 6, type = BOOL)
  public final Boolean processBinarization;

  private FingerprintMessage(Builder builder) {
    super(builder);
    this.rows = builder.rows;
    this.columns = builder.columns;
    this.bytelength = builder.bytelength;
    this.pixelData = builder.pixelData;
    this.outputPixelData = builder.outputPixelData;
    this.processBinarization = builder.processBinarization;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FingerprintMessage)) return false;
    FingerprintMessage o = (FingerprintMessage) other;
    return equals(rows, o.rows)
        && equals(columns, o.columns)
        && equals(bytelength, o.bytelength)
        && equals(pixelData, o.pixelData)
        && equals(outputPixelData, o.outputPixelData)
        && equals(processBinarization, o.processBinarization);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = rows != null ? rows.hashCode() : 0;
      result = result * 37 + (columns != null ? columns.hashCode() : 0);
      result = result * 37 + (bytelength != null ? bytelength.hashCode() : 0);
      result = result * 37 + (pixelData != null ? pixelData.hashCode() : 0);
      result = result * 37 + (outputPixelData != null ? outputPixelData.hashCode() : 0);
      result = result * 37 + (processBinarization != null ? processBinarization.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<FingerprintMessage> {

    public Integer rows;
    public Integer columns;
    public Integer bytelength;
    public ByteString pixelData;
    public ByteString outputPixelData;
    public Boolean processBinarization;

    public Builder() {
    }

    public Builder(FingerprintMessage message) {
      super(message);
      if (message == null) return;
      this.rows = message.rows;
      this.columns = message.columns;
      this.bytelength = message.bytelength;
      this.pixelData = message.pixelData;
      this.outputPixelData = message.outputPixelData;
      this.processBinarization = message.processBinarization;
    }

    /**
     * Rows in Bitmap
     */
    public Builder rows(Integer rows) {
      this.rows = rows;
      return this;
    }

    /**
     * Columns in Bitmap
     */
    public Builder columns(Integer columns) {
      this.columns = columns;
      return this;
    }

    /**
     * Number of bytes in bitmap byte array
     */
    public Builder bytelength(Integer bytelength) {
      this.bytelength = bytelength;
      return this;
    }

    /**
     * Byte array of Bitmap pixel data(input)
     */
    public Builder pixelData(ByteString pixelData) {
      this.pixelData = pixelData;
      return this;
    }

    /**
     * Byte array of output pixel data
     */
    public Builder outputPixelData(ByteString outputPixelData) {
      this.outputPixelData = outputPixelData;
      return this;
    }

    /**
     * Binarization  boolean
     */
    public Builder processBinarization(Boolean processBinarization) {
      this.processBinarization = processBinarization;
      return this;
    }

    @Override
    public FingerprintMessage build() {
      checkRequiredFields();
      return new FingerprintMessage(this);
    }
  }
}
